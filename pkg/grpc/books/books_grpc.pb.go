// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: books.proto

package books

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookServiceGRPCClient is the client API for BookServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceGRPCClient interface {
	GetBooksByAuthor(ctx context.Context, in *GetBooksByAuthorIn, opts ...grpc.CallOption) (*GetBooksByAuthorOut, error)
	GetAuthorsByBook(ctx context.Context, in *GetAuthorsByBookIn, opts ...grpc.CallOption) (*GetAuthorsByBookOut, error)
}

type bookServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceGRPCClient(cc grpc.ClientConnInterface) BookServiceGRPCClient {
	return &bookServiceGRPCClient{cc}
}

func (c *bookServiceGRPCClient) GetBooksByAuthor(ctx context.Context, in *GetBooksByAuthorIn, opts ...grpc.CallOption) (*GetBooksByAuthorOut, error) {
	out := new(GetBooksByAuthorOut)
	err := c.cc.Invoke(ctx, "/books.BookServiceGRPC/GetBooksByAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceGRPCClient) GetAuthorsByBook(ctx context.Context, in *GetAuthorsByBookIn, opts ...grpc.CallOption) (*GetAuthorsByBookOut, error) {
	out := new(GetAuthorsByBookOut)
	err := c.cc.Invoke(ctx, "/books.BookServiceGRPC/GetAuthorsByBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceGRPCServer is the server API for BookServiceGRPC service.
// All implementations must embed UnimplementedBookServiceGRPCServer
// for forward compatibility
type BookServiceGRPCServer interface {
	GetBooksByAuthor(context.Context, *GetBooksByAuthorIn) (*GetBooksByAuthorOut, error)
	GetAuthorsByBook(context.Context, *GetAuthorsByBookIn) (*GetAuthorsByBookOut, error)
	mustEmbedUnimplementedBookServiceGRPCServer()
}

// UnimplementedBookServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedBookServiceGRPCServer struct {
}

func (UnimplementedBookServiceGRPCServer) GetBooksByAuthor(context.Context, *GetBooksByAuthorIn) (*GetBooksByAuthorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksByAuthor not implemented")
}
func (UnimplementedBookServiceGRPCServer) GetAuthorsByBook(context.Context, *GetAuthorsByBookIn) (*GetAuthorsByBookOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsByBook not implemented")
}
func (UnimplementedBookServiceGRPCServer) mustEmbedUnimplementedBookServiceGRPCServer() {}

// UnsafeBookServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceGRPCServer will
// result in compilation errors.
type UnsafeBookServiceGRPCServer interface {
	mustEmbedUnimplementedBookServiceGRPCServer()
}

func RegisterBookServiceGRPCServer(s grpc.ServiceRegistrar, srv BookServiceGRPCServer) {
	s.RegisterService(&BookServiceGRPC_ServiceDesc, srv)
}

func _BookServiceGRPC_GetBooksByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksByAuthorIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceGRPCServer).GetBooksByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.BookServiceGRPC/GetBooksByAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceGRPCServer).GetBooksByAuthor(ctx, req.(*GetBooksByAuthorIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookServiceGRPC_GetAuthorsByBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorsByBookIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceGRPCServer).GetAuthorsByBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/books.BookServiceGRPC/GetAuthorsByBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceGRPCServer).GetAuthorsByBook(ctx, req.(*GetAuthorsByBookIn))
	}
	return interceptor(ctx, in, info, handler)
}

// BookServiceGRPC_ServiceDesc is the grpc.ServiceDesc for BookServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books.BookServiceGRPC",
	HandlerType: (*BookServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBooksByAuthor",
			Handler:    _BookServiceGRPC_GetBooksByAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsByBook",
			Handler:    _BookServiceGRPC_GetAuthorsByBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
